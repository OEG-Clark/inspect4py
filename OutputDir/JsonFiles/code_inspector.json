{"file": {"path": "code_inspector.py", "fileNameBase": "code_inspector", "extension": "py", "doc": {"long_description": "This script allows the user to inspect a file or files within directory \n(and its subdirectories) and extract all the most relevant information, \nsuch as documentations, classes (and their methods), functions, etc.\n\nTo extract information from docstrings, we have started with the codes\ndocumented. But in the future we will extend the code\nto support others.  \n\nThis tool accepts (for now) only python code (.py)\n\nThis script requires `ast`, `cdmcfparser` and `docsting_parse`\nbe installed within the Python environment you are running \nthis script in.", "short_description": "Code Inspector", "full": "Code Inspector\n\nThis script allows the user to inspect a file or files within directory \n(and its subdirectories) and extract all the most relevant information, \nsuch as documentations, classes (and their methods), functions, etc.\n\nTo extract information from docstrings, we have started with the codes\ndocumented. But in the future we will extend the code\nto support others.  \n\nThis tool accepts (for now) only python code (.py)\n\nThis script requires `ast`, `cdmcfparser` and `docsting_parse`\nbe installed within the Python environment you are running \nthis script in."}}, "dependencies": {"dep_0": {"module": [], "name": ["ast"], "alias": null}, "dep_1": {"module": [], "name": ["sys"], "alias": null}, "dep_2": {"module": [], "name": ["json"], "alias": null}, "dep_3": {"module": [], "name": ["os"], "alias": null}, "dep_4": {"module": ["os"], "name": ["listdir"], "alias": null}, "dep_5": {"module": ["os", "path"], "name": ["isfile"], "alias": null}, "dep_6": {"module": ["os", "path"], "name": ["join"], "alias": null}, "dep_7": {"module": [], "name": ["tokenize"], "alias": null}, "dep_8": {"module": ["pprint"], "name": ["pprint"], "alias": null}, "dep_9": {"module": ["cdmcfparser"], "name": ["getControlFlowFromFile"], "alias": null}, "dep_10": {"module": ["staticfg"], "name": ["builder"], "alias": null}, "dep_11": {"module": [], "name": ["argparse"], "alias": null}, "dep_12": {"module": ["docstring_parser"], "name": ["parse"], "alias": "docParse"}}, "classes": {"Code_Inspection": {"doc": {"long_description": null, "short_description": null, "full": null}, "extend": [], "min_max_lineno": [37, 363], "methods": {"__init__": {"doc": {"long_description": null, "short_description": "init method initiliazes the Code_Inspection object", "args": {"self": {"description": "represent the instance of the class", "type_name": "self", "is_optional": false, "default": null}, "path": {"description": "the file to inspect", "type_name": "str", "is_optional": false, "default": null}, "outCfPath": {"description": "the output directory to store the control\nflow information", "type_name": "str", "is_optional": false, "default": null}, "outJsonPath": {"description": "the output directory to store the json file\nwith features extracted from the ast tree.", "type_name": "str", "is_optional": false, "default": null}, "format": {"description": "format to store the control flow diagram", "type_name": "str", "is_optional": false, "default": null}}, "raises": {}}, "args": ["self", "path", "outCfPath", "outJsonPath", "format"], "returns": [], "min_max_lineno": [38, 60]}, "parser_file": {"doc": {"long_description": null, "short_description": "parse_file method parsers a file as an AST tree", "args": {"self": {"description": "represent the instance of the class", "type_name": "self", "is_optional": false, "default": null}}, "returns": {"description": "the file as an ast tree", "type_name": "ast.tree", "is_generator": false, "return_name": null}, "raises": {}}, "args": ["self"], "returns": [null], "min_max_lineno": [62, 71]}, "inspect_file": {"doc": {"long_description": "Those features are path, fileNameBase, extension, docstring\nThe method support several levels of docstrings extraction,\nsuch as file's long, short a full descrition.\n\n:param self self: represent the instance of the class\n:return dictionary a dictionary with the file information extracted", "short_description": "inspec_file method extracts the features at file level.", "args": {}, "raises": {}}, "args": ["self"], "returns": [["fileInfo"]], "min_max_lineno": [72, 94]}, "inspect_controlflow": {"doc": {"long_description": "extracting the controlflow of a file. One as a\ntext and another as a figure (PNG/PDF/DOT).", "short_description": "inspect_controlFlow uses two methods for ", "args": {"self": {"description": "represent the instance of the class", "type_name": "self", "is_optional": false, "default": null}, "format": {"description": "represent the format to save the figure", "type_name": "str", "is_optional": false, "default": null}}, "returns": {"description": "a dictionary with the all information extracted (at file level)", "type_name": "dictionary", "is_generator": false, "return_name": null}, "raises": {}}, "args": ["self", "format"], "returns": [["controlInfo"]], "min_max_lineno": [95, 125]}, "inspect_functions": {"doc": {"long_description": "to _f_definitions method to extracts all the features at function level.", "short_description": "inspect_functions detects all the functions in a AST tree, and calls", "args": {"self": {"description": "represent the instance of the class", "type_name": "self", "is_optional": false, "default": null}}, "returns": {"description": "a dictionary with the all functions information extracted", "type_name": "dictionary", "is_generator": false, "return_name": null}, "raises": {}}, "args": ["self"], "returns": [null], "min_max_lineno": [126, 136]}, "inspect_classes": {"doc": {"long_description": "and extracts their features. It also calls to _f_definitions method\nto extract features at method level.\n\nThe features extracted are name, docstring (this information is further analysed\nand classified into several categories), extends, start\nand end of the line and methods.", "short_description": "inspect_classes detecs all the classes and their methods,", "args": {"self": {"description": "represent the instance of the class", "type_name": "self", "is_optional": false, "default": null}}, "returns": {"description": "a dictionary with the all classes information extracted", "type_name": "dictionary", "is_generator": false, "return_name": null}, "raises": {}}, "args": ["self"], "returns": [["classesInfo"]], "min_max_lineno": [137, 170]}, "inspect_dependencies": {"doc": {"long_description": "Those features are module , name, and alias.", "short_description": "inspect_dependencies method extracts the features at dependencies level.", "args": {"self": {"description": "represent the instance of the class", "type_name": "self", "is_optional": false, "default": null}}, "returns": {"description": "a dictionary with the all dependencies information extracted", "type_name": "dictionary", "is_generator": false, "return_name": null}, "raises": {}}, "args": ["self"], "returns": [["depInfo"]], "min_max_lineno": [171, 197]}, "file_json": {"doc": {"long_description": "extracted from a given file such as, functions, classes \nand dependencies levels into the same dictionary.\n\nIt also writes this new dictionary to a json file.", "short_description": "file_json method aggregates all the features previously", "args": {"self": {"description": "represent the instance of the class", "type_name": "self", "is_optional": false, "default": null}}, "returns": {"description": "a dictionary with the all information extracted (at file level)", "type_name": "dictionary", "is_generator": false, "return_name": null}, "raises": {}}, "args": ["self"], "returns": [["FileDict"]], "min_max_lineno": [199, 221]}, "_f_definitions": {"doc": {"long_description": "returns, raises of a list of functions or a methods.\n\nFurthermore, it also extracts automatically several values\nfrom a docstring, such as long and short description, arguments' \nname, description, type, default values and if it they are optional\nor not.", "short_description": "_f_definitions extracts the name, args, doscstring ", "args": {"self": {"description": "represent the instance of the class", "type_name": "self", "is_optional": false, "default": null}, "functions_definitions": {"description": "represent a list with all functions or methods nodes", "type_name": "list", "is_optional": false, "default": null}}, "returns": {"description": "a dictionary with the all the information at function/method level", "type_name": "dictionary", "is_generator": false, "return_name": null}, "raises": {}}, "args": ["self", "functions_definitions"], "returns": [["funcsInfo"]], "min_max_lineno": [223, 270]}, "_get_ids": {"doc": {"long_description": "If not return None", "short_description": "_get_ids extracts identifiers if present. ", "args": {"self": {"description": "represent the instance of the class", "type_name": "self", "is_optional": false, "default": null}, "elt": {"description": "AST node", "type_name": "ast.node", "is_optional": false, "default": null}}, "returns": {"description": "list of identifiers", "type_name": "list", "is_generator": false, "return_name": null}, "raises": {}}, "args": ["self", "elt"], "returns": [null, []], "min_max_lineno": [273, 286]}, "_compute_interval": {"doc": {"long_description": "for a given class, function or method.", "short_description": "_compute_interval extract the lines (min and max)", "args": {"self": {"description": "represent the instance of the class", "type_name": "self", "is_optional": false, "default": null}, "node": {"description": "AST node", "type_name": "ast.node", "is_optional": false, "default": null}}, "returns": {"description": "min and max lines", "type_name": "set", "is_generator": false, "return_name": null}, "raises": {}}, "args": ["self", "node"], "returns": [["min_lineno"]], "min_max_lineno": [287, 302]}, "_formatFlow": {"doc": {"long_description": "as a text.", "short_description": "_formatFlow reformats the control flow output", "args": {"self": {"description": "represent the instance of the class", "type_name": "self", "is_optional": false, "default": null}, "s": {"description": "control flow graph", "type_name": "cfg_graph", "is_optional": false, "default": null}}, "returns": {"description": "cfg formated as a text", "type_name": "str", "is_generator": false, "return_name": null}, "raises": {}}, "args": ["self", "s"], "returns": [["result"], null, null, null, null], "min_max_lineno": [303, 363]}}}}, "functions": {"create_output_dirs": {"doc": {"long_description": "to save the results. ControlFlow to save the\ncfg information (txt and PNG) and JsonFiles to\nsave the aggregated json file with all the information\nextracted per file.", "short_description": "create_output_dirs creates two subdirectories", "args": {"outputDir": {"description": "Output Directory in which the new subdirectories\nwill be created.", "type_name": "str", "is_optional": false, "default": null}}, "raises": {}}, "args": ["outputDir"], "returns": [["controlFlowDir", "jsonDir"]], "min_max_lineno": [365, 391]}, "main": {"doc": {"long_description": null, "short_description": null, "args": {}, "raises": {}}, "args": ["args"], "returns": [], "min_max_lineno": [394, 428]}}, "controlflow": {"cfg": "OutputDir/ControlFlow/code_inspector.txt", "png": "OutputDir/ControlFlow/code_inspector.png"}}